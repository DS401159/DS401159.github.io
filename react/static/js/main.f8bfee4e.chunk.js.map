{"version":3,"sources":["scripts/index.js","scripts/views/index.js","App.js","serviceWorker.js","scripts/reducers/data.js","scripts/reducers/user.js","scripts/reducers/index.js","store.js","index.js","utils/lazyload.js","utils/history.js","utils/axios.js","utils/index.js"],"names":["Mainrouter","basename","component","Layout","Component","className","style","height","path","exact","render","to","Lazyload","App","Boolean","window","location","hostname","match","defaultstate","immutable","Map","bj","kj","qt","user","reducers","combineReducers","data","state","action","type","set","payload","store","createStore","applyMiddleware","thunk","promise","ReactDOM","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","loadingComponent","width","posotion","color","fontSize","position","left","top","spin","loader","loading","Loadable","history","createHashHistory","axios","defaults","baseURL","failToast","msg","hide","fail","headers","common","post","interceptors","request","use","config","sessionStorage","token","error","Promise","reject","response"],"mappings":"+NAIqBA,E,iLAEb,OACI,gBAAC,IAAD,CAAMC,SAAS,KACX,gBAAC,IAAD,CAAOC,UAAWC,W,GAJMC,K,gMCDnBD,E,iLAEb,OACI,uBAAKE,UAAU,OAAOC,MAAO,CAACC,OAAO,SACjC,gBAAC,IAAD,KACI,gBAAC,IAAD,CAAOC,KAAK,IAAIC,OAAK,EAACC,OAAQ,kBAAK,gBAAC,IAAD,CAAUC,GAAG,cAChD,gBAAC,IAAD,CAAOH,KAAK,SAASN,UAAWU,aAAS,kBAAI,+EAC7C,gBAAC,IAAD,CAAOJ,KAAK,QAAQN,UAAWU,aAAS,kBAAI,kEAC5C,gBAAC,IAAD,CAAOF,OAAQ,kBAAK,gBAAC,IAAD,CAAUC,GAAG,oB,GARjBP,K,kLCSrBS,MARf,WACE,OACE,yBAAKR,UAAU,MAAMC,MAAO,CAACC,OAAO,SAClC,kBAAC,IAAD,QCKcO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4CCdFC,EAAeC,UAAUC,IAAI,CAC7BC,GAAI,GACJC,GAAI,GACJC,GAAI,KCLJL,EAAeC,UAAUC,IAAI,CAC/BI,KAAK,KCEIC,EAASC,0BAAgB,CAChCC,KFIc,WAAmC,IAAlCC,EAAiC,uDAAzBV,EAAcW,EAAW,uCAChD,OAAQA,EAAOC,MACX,IAAK,QACD,OAAOF,EAAMG,IAAI,KAAMF,EAAOG,SAElC,IAAK,QACD,OAAOJ,EAAMG,IAAI,KAAMF,EAAOG,SAElC,IAAK,QACD,OAAOJ,EAAMG,IAAI,KAAMF,EAAOG,SAElC,QACI,OAAOJ,IEffJ,KDDc,WAAmC,IAAlCI,EAAiC,uDAAzBV,EAAcW,EAAW,uCAChD,OAAQA,EAAOC,MACX,IAAK,UACD,OAAOF,EAAMG,IAAI,OAAQF,EAAOG,SAEpC,QACI,OAAOJ,M,2BEDJK,EAFLC,YAAYT,EAASU,YAAgBC,IAAMC,MCDrDC,IAAS7B,OACL,kBAAC,IAAD,CAAUwB,MAAOA,GACb,kBAAC,EAAD,OAEJM,SAASC,eAAe,SLqHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB,+EM7HbC,EAAiB,WACnB,OACI,yBAAK1C,MAAO,CAAC2C,MAAM,OAAO1C,OAAO,OAAO2C,SAAS,aAC7C,kBAAC,IAAD,CAAMnB,KAAK,UAAUzB,MAAO,CAAC6C,MAAM,UAAUC,SAAU,IAAIC,SAAS,WAAWC,KAAK,MAAMC,IAAI,OAAQC,MAAI,MAM3G5C,EAAU,SAAC6C,GAAmC,IAA5BC,EAA2B,uDAAnBV,EAEjC,OAAOW,IAAS,CACZF,SACAC,aCjBGE,EAAU,I,MAAIC,G,2CCEzBC,IAAMC,SAASC,QAAQ,2BAqBhB,SAASC,EAAUC,GACtB,IAAMC,OACN,IAAMC,KAAKF,EAAK,GApBpBJ,IAAMC,SAASM,QAAQC,OAAvB,MADU,GAEVR,IAAMC,SAASM,QAAQE,KAAK,gBAAgB,oCAuB5CT,IAAMU,aAAaC,QAAQC,KAAI,SAASC,GAEpC,OADAA,EAAON,QAAP,MAAwBO,eAAeC,MAChCF,KACT,SAASG,GAEP,OADAb,EAAU,4BACHc,QAAQC,OAAOF,MAG1BhB,IAAMU,aAAaS,SAASP,KAAI,SAASO,GACrC,OAAOA,KACT,SAASH,GAEP,OADAb,EAAU,4BACHc,QAAQC,OAAOF,MC1C1B,0G","file":"static/js/main.f8bfee4e.chunk.js","sourcesContent":["import {HashRouter as Hash,Route} from 'react-router-dom'\r\nimport Layout from './views'\r\n\r\n\r\nexport default class Mainrouter extends Component {\r\n    render(){\r\n        return(\r\n            <Hash basename='/'>\r\n                <Route component={Layout}></Route>\r\n            </Hash>\r\n        )\r\n    }\r\n}","import {Lazyload}  from \"&\";\r\nimport {Switch,Route,Redirect} from 'react-router-dom'\r\n\r\nexport default class Layout extends Component{\r\n    render(){\r\n        return(\r\n            <div className='main' style={{height:'100%'}}>\r\n                <Switch>\r\n                    <Route path='/' exact render={()=>(<Redirect to='/login'></Redirect>)}></Route>\r\n                    <Route path='/login' component={Lazyload(()=>import('./login'))}></Route>\r\n                    <Route path='/home' component={Lazyload(()=>import('./home'))}></Route>\r\n                    <Route render={()=>(<Redirect to='/login' />)} />\r\n                </Switch>\r\n            </div>\r\n        )\r\n    }\r\n}","import React from 'react';\n\nimport Mainrouter from './scripts';\n\nfunction App() {\n  return (\n    <div className='APP' style={{height:'100%'}}>\n      <Mainrouter></Mainrouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\r\n\r\nimport immutable from 'immutable'\r\n\r\nvar defaultstate = immutable.Map({\r\n    bj: [],\r\n    kj: [],\r\n    qt: []\r\n})\r\n\r\nexport var data = (state = defaultstate, action) => {\r\n    switch (action.type) {\r\n        case 'getbj':\r\n            return state.set('bj', action.payload)\r\n            break;\r\n        case 'getkj':\r\n            return state.set('kj', action.payload)\r\n            break;\r\n        case 'getqt':\r\n            return state.set('qt', action.payload)\r\n            break;\r\n        default:\r\n            return state\r\n            break;\r\n    }\r\n}","import immutable from 'immutable'\r\n\r\nvar defaultstate = immutable.Map({\r\n  user:{}\r\n})\r\n\r\nexport var user = (state = defaultstate, action) => {\r\n    switch (action.type) {\r\n        case 'getuser':\r\n            return state.set('user', action.payload)\r\n            break;\r\n        default:\r\n            return state\r\n            break;\r\n    }\r\n}","\r\n\r\nimport {combineReducers} from 'redux-immutable'\r\nimport { data } from './data'\r\nimport { user } from './user'\r\nexport var reducers=combineReducers({\r\n    data:data,\r\n    user:user\r\n})","\r\n\r\nimport {createStore,applyMiddleware} from 'redux'\r\nimport { reducers } from './scripts/reducers'\r\n\r\nimport thunk from 'redux-thunk'\r\nimport promise from 'redux-promise'\r\n\r\n\r\nvar store=createStore(reducers,applyMiddleware(thunk,promise))\r\n\r\nexport default store","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport './styles/index.scss'\nimport {Provider} from 'react-redux'\nimport store from './store'\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>, \n    document.getElementById('root')\n);\n\n\nserviceWorker.unregister();\n","\r\nimport React from \"react\";\r\nimport {Icon } from 'antd';\r\nimport Loadable from 'react-loadable'\r\n\r\n//通用的过场组件\r\nconst loadingComponent=()=>{\r\n    return (\r\n        <div style={{width:'100%',height:'100%',posotion:\"relative\"}}>\r\n            <Icon type=\"loading\" style={{color:'skyblue',fontSize: 100,position:'absolute',left:'45%',top:'45%'}} spin />\r\n        </div>\r\n    )\r\n}\r\n\r\n//过场组件默认采用通用的，若传入了loading，则采用传入的过场组件\r\nexport var Lazyload= (loader,loading=loadingComponent)=>{\r\n    \r\n    return Loadable({\r\n        loader,  // 需要懒加载的组件  \r\n        loading\r\n    })\r\n}","import { createHashHistory,createBrowserHistory } from \"history\";\r\n\r\nexport var history = new createHashHistory()\r\n\r\n// export {history}","\r\n\r\nimport axios from 'axios'\r\n\r\naxios.defaults.baseURL='http://123.56.84.4:1900/'\r\n\r\nvar token=''\r\naxios.defaults.headers.common['token']=token\r\naxios.defaults.headers.post['Content-Type']='application/x-www-form-urlencoded';\r\n\r\n\r\n\r\nimport {Toast} from 'antd-mobile'\r\n\r\nexport function showToastNoMask(msg) {\r\n    Toast.hide();\r\n    Toast.info(msg, 2, null, false);\r\n  }\r\n\r\nexport function loadingToast(msg) {\r\n    Toast.hide();\r\n    Toast.loading(msg, 1, () => {\r\n    });\r\n  }\r\n\r\nexport function failToast(msg) {\r\n    Toast.hide();\r\n    Toast.fail(msg, 1);\r\n}\r\n\r\n\r\naxios.interceptors.request.use(function(config){\r\n    config.headers['token']=sessionStorage.token\r\n    return config\r\n},function(error){\r\n    failToast('请求失败')\r\n    return Promise.reject(error)\r\n})\r\n\r\naxios.interceptors.response.use(function(response){\r\n    return response\r\n},function(error){\r\n    failToast('响应失败')\r\n    return Promise.reject(error)\r\n})\r\n\r\n\r\n\r\nexport {axios}","\r\nexport {Lazyload} from './lazyload'\r\nexport {history} from './history'\r\nexport {axios} from './axios'"],"sourceRoot":""}